name: Reusable WF - Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      payload:
        required: false
        type: string
      build-type:
        required: false
        type: string

jobs:

  get-dependency-details:
    uses: "./.github/workflows/get-dependency-details.yml"
    secrets: inherit
    with:
      owner: "howsoai"
      repo: "amalgam"
      payload: "${{ inputs.payload }}"

  pepify:
    uses: "./.github/workflows/pepify.yml"
    with:
      version: ${{ inputs.version }}

  build:
    name: Build (${{ matrix.plat }})
    needs: ["get-dependency-details", "pepify"]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plat: [manylinux_2_29_x86_64, manylinux_2_29_aarch64, macosx_12_0_x86_64, macosx_12_0_arm64, win_amd64, any]

    steps:

    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    - name: Install cibuildwheel
      run: >-
        python3 -m
        pip install
        cibuildwheel==2.15.0
        build

    - name: Download Amalgam linux-amd64
      if: matrix.plat == 'manylinux_2_29_x86_64' || matrix.plat == 'any'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh ${{ needs.get-dependency-details.outputs.run-type }} download -D amalgam/lib/linux/amd64 -R "howsoai/amalgam" -p "*linux-amd64*" "${{ needs.get-dependency-details.outputs.run-id }}"
        # Needed because release/non-release downloads are different structure
        cd amalgam/lib/linux/amd64 && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz

    - name: Download Amalgam linux-arm64 [run]
      if: (matrix.plat == 'manylinux_2_29_aarch64' || matrix.plat == 'any') && needs.get-dependency-details.outputs.run-type == 'run'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh ${{ needs.get-dependency-details.outputs.run-type }} download -D amalgam/lib/linux/arm64 -R "howsoai/amalgam" -p "*linux-arm64" "${{ needs.get-dependency-details.outputs.run-id }}"
        # Needed because release/non-release downloads are different structure
        cd amalgam/lib/linux/arm64 && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz

    - name: Download Amalgam linux-arm64 [release]
      if: (matrix.plat == 'manylinux_2_29_aarch64' || matrix.plat == 'any') && needs.get-dependency-details.outputs.run-type == 'release'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh ${{ needs.get-dependency-details.outputs.run-type }} download -D amalgam/lib/linux/arm64 -R "howsoai/amalgam" -p "*linux-arm64.tar.gz" "${{ needs.get-dependency-details.outputs.run-id }}"
        # Needed because release/non-release downloads are different structure
        cd amalgam/lib/linux/arm64 && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz

    - name: Download Amalgam linux-arm64_8a
      if: matrix.plat == 'manylinux_2_29_aarch64' || matrix.plat == 'any'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh ${{ needs.get-dependency-details.outputs.run-type }} download -D amalgam/lib/linux/arm64_8a -R "howsoai/amalgam" -p "*linux-arm64_8a*" "${{ needs.get-dependency-details.outputs.run-id }}"
        # Needed because release/non-release downloads are different structure
        cd amalgam/lib/linux/arm64_8a && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz

    - name: Download Amalgam darwin-amd64
      if: matrix.plat == 'macosx_12_0_x86_64' || matrix.plat == 'any'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh ${{ needs.get-dependency-details.outputs.run-type }} download -D amalgam/lib/darwin/amd64 -R "howsoai/amalgam" -p "*darwin-amd64*" "${{ needs.get-dependency-details.outputs.run-id }}"
        # Needed because release/non-release downloads are different structure
        cd amalgam/lib/darwin/amd64 && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz

    - name: Download Amalgam darwin-arm64
      if: matrix.plat == 'macosx_12_0_arm64' || matrix.plat == 'any'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh ${{ needs.get-dependency-details.outputs.run-type }} download -D amalgam/lib/darwin/arm64 -R "howsoai/amalgam" -p "*darwin-arm64*" "${{ needs.get-dependency-details.outputs.run-id }}"
        # Needed because release/non-release downloads are different structure
        cd amalgam/lib/darwin/arm64 && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz

    - name: Download Amalgam windows-amd64
      if: matrix.plat == 'win_amd64' || matrix.plat == 'any'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh ${{ needs.get-dependency-details.outputs.run-type }} download -D amalgam/lib/windows/amd64 -R "howsoai/amalgam" -p "*windows-amd64*" "${{ needs.get-dependency-details.outputs.run-id }}"
        # Needed because release/non-release downloads are different structure
        cd amalgam/lib/windows/amd64 && if [ ! -f *.tar.gz ]; then mv */*.tar.gz ./; fi && tar -xvzf *.tar.gz

    - name: Format lib dir and add workflow metadata
      run: |
        cp version.json amalgam/lib/version.json
        cd amalgam/lib
        if [[ "${{ matrix.plat }}" == 'win_amd64' ]]; then
          fp=$(find ./ -type f -name 'amalgam-mt.exe')
        elif [[ "${{ matrix.plat }}" == 'any' ]]; then
          fp="./linux/amd64/bin/amalgam-mt"
        else
          fp=$(find ./ -type f -name 'amalgam-mt')
        fi
        echo "Found amalgam-mt at: $fp"
        cp $fp ~/
        sed -i 's/dependencies/version/g' version.json
        find . -type d -name lib -exec sh -c 'mv {}/* "$(dirname {})"' \;

    - name: Set amalgam version metadata
      run: |
        cd amalgam/lib
        # Set the display title and build date info in version.json

        # Note: the below code has a few bugs in it. The main one being for non-amd64 platforms, this will not work because running the amalgam
        #       binary requires emulation. There also seems to be another issue even on amd64 platforms and not being able to find or execute
        #       the binary. Commenting out for now as the functionality is not required and only run on branch builds (a nice to have).
        # if [[ -n '${{ needs.get-dependency-details.outputs.build-title }}' ]]; then
        #   jq '.version |= . + {"amalgam_display_title": ${{ needs.get-dependency-details.outputs.build-title }}}' version.json > temp.json && mv temp.json version.json
        #   jq '.version |= . + {"amalgam_build_date": ${{ needs.get-dependency-details.outputs.build-date }}}' version.json > temp.json && mv temp.json version.json
        #   # Replace the release version with the downloaded prerelease version
        #   pr_version=$(~/amalgam-mt --version)
        #   echo "Found amalgam version: '$pr_version'"
        #   jq --arg new_version "$pr_version" '.version.amalgam = $new_version' version.json > temp.json && mv temp.json version.json
        #   rm ~/amalgam-mt*
        # fi

        jq '.version |= . + {"amalgam_sha": ${{ needs.get-dependency-details.outputs.head-sha }}}' version.json > temp.json && mv temp.json version.json
        jq '.version |= . + {"amalgam_url": ${{ needs.get-dependency-details.outputs.url }}}' version.json > temp.json && mv temp.json version.json
        cat version.json

    - name: Build wheels
      run: |
        python3 -m build --wheel --outdir wheelhouse/ .
        mkdir -p dist/
        mv wheelhouse/*.whl dist/amalgam_lang-${{ needs.pepify.outputs.pepified-version }}-py3-none-${{ matrix.plat }}.whl
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.pepify.outputs.pepified-version }}

    - name: Build tarball
      if: matrix.plat == 'any'
      run: |
        python3 -m build --sdist --outdir dist/ .
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.pepify.outputs.pepified-version }}

    - name: Upload Tarball Artifact
      if: matrix.plat == 'any'
      uses: actions/upload-artifact@v3
      with:
        name: amalgam-lang-${{ needs.pepify.outputs.pepified-version }}
        path: dist/amalgam-lang-*.tar.gz
        if-no-files-found: error

    - name: Upload Wheel Artifact
      uses: actions/upload-artifact@v3
      with:
        name: amalgam_lang-${{ needs.pepify.outputs.pepified-version }}-py3-none-${{ matrix.plat }}
        path: dist/amalgam_lang-*.whl
        if-no-files-found: error

  workflow-summary:
    needs: ["build"]
    uses: "./.github/workflows/workflow-summary.yml"
    secrets: inherit
    with:
      payload: "${{ inputs.payload }}"
      build-type: "${{ inputs.build-type }}"

  test-3-8:
    needs: ["build"]
    uses: "./.github/workflows/pytest.yml"
    secrets: inherit
    with:
      python-version: "3.8"

  test-3-9:
    needs: ["build"]
    uses: "./.github/workflows/pytest.yml"
    secrets: inherit
    with:
      python-version: "3.9"

  test-3-10:
    needs: ["build"]
    uses: "./.github/workflows/pytest.yml"
    secrets: inherit
    with:
      python-version: "3.10"

  test-3-11:
    needs: ["build"]
    uses: "./.github/workflows/pytest.yml"
    secrets: inherit
    with:
      python-version: "3.11"

  create-release:
    if: inputs.build-type == 'release'
    needs: ['build', 'test-3-8', 'test-3-9', 'test-3-10', 'test-3-11']
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      contents: write
      id-token: write

    steps:

      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./tmp

      - name: Clean up dir
        run: |
          mkdir -p dist
          find ./tmp -type f -name '*.whl' -exec mv -t ./dist {} +
          find ./tmp -type f -name '*.tar.gz' -exec mv -t ./dist {} +
          ls ./dist

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ inputs.version }}
          commit: ${{ github.sha }}
          name: "amalgam-lang-py ${{ inputs.version }}"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          makeLatest: legacy
          artifacts: "dist/*"
          artifactContentType: application/gzip

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1